{"version":3,"file":"component---src-templates-post-template-tsx-8d4f8b7955a352edc36d.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/hooks/useUtterance.ts","webpack://gatsby-starter-default/./src/components/Comment/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostDetail.style.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostFooter/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostBody/PostContent.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostBody/TableOfContent.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostBody/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostHeader/PostHeader.info.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostHeader/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/index.tsx","webpack://gatsby-starter-default/./src/templates/post.template.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\nimport { useThemeModeProviderState } from '@/context/ThemeMode.Provider'\n\nimport useBlogConfig from './useBlogConfig'\n\nconst useUtterance = () => {\n  const { isDarkMode } = useThemeModeProviderState()\n  const { utterances: CONFIG } = useBlogConfig()\n  const utteranceTheme = isDarkMode ? 'github-dark' : 'github-light'\n  const utteranceElement = useRef<HTMLDivElement>(null)\n\n  const createUtterance = () => {\n    const utterances: HTMLScriptElement = document.createElement('script')\n    const attributes = { ...CONFIG, 'issue-term': CONFIG.issueTerm, theme: utteranceTheme }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    utteranceElement.current?.appendChild(utterances)\n  }\n\n  const setThemeUtterance = (iframe: HTMLIFrameElement) => {\n    const msg = {\n      type: 'set-theme',\n      theme: utteranceTheme,\n    }\n    iframe.contentWindow?.postMessage(msg, 'https://utteranc.es')\n  }\n\n  useEffect(() => {\n    if (utteranceElement.current === null) return\n    const utteranceIframe = document.querySelector('iframe.utterances-frame') as HTMLIFrameElement\n    utteranceIframe ? setThemeUtterance(utteranceIframe) : createUtterance()\n  }, [isDarkMode])\n\n  return { utteranceElement }\n}\n\nexport default useUtterance\n","import useUtterance from '@/hooks/useUtterance'\n\nconst Comment = () => {\n  const { utteranceElement } = useUtterance()\n\n  return <div ref={utteranceElement} />\n}\n\nexport default Comment\n","import styled from '@emotion/styled'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nimport { GatsbyImageDataType } from '@/types/gatsby.type'\n\n// Header\ninterface GatsbyImgProps {\n  image: GatsbyImageDataType\n  alt: string\n  className?: string\n}\n\nexport const Header = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n  margin-bottom: 64px;\n\n  @media ${({ theme }) => theme.media.medium} {\n    height: 300px;\n  }\n`\n\nexport const PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: var(--main-content-width);\n  height: 100%;\n  margin: 0 auto;\n  padding: var(--padding-l) var(--space-m);\n  color: var(--color-white);\n  background-color: transparent;\n  position: relative;\n  z-index: var(--z-index-second);\n`\n\nexport const Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  ${({ theme: { typography } }) => typography.displayBoldLarge};\n\n  @media ${({ theme }) => theme.media.medium} {\n    ${({ theme: { typography } }) => typography.displayBold};\n  }\n`\n\nexport const PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n\n  ${({ theme: { typography } }) => typography.linkMedium}\n\n  @media ${({ theme: { media } }) => media.medium} {\n    flex-direction: column;\n    align-items: flex-start;\n    ${({ theme: { typography } }) => typography.linkBase}\n  }\n\n  @media ${({ theme: { media } }) => media.small} {\n    ${({ theme: { typography } }) => typography.linkSmall}\n  }\n`\n\nexport const PostInfo = styled.div`\n  display: flex;\n  gap: 8px;\n`\n\n// Body\nexport const Body = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: var(--main-content-width);\n  margin: 0 auto;\n`\n\nexport const MarkdownRenderer = styled.article`\n  ${({ theme: { markdownStyle } }) => markdownStyle}\n`\n\nexport const TableOfContent = styled.aside`\n  position: absolute;\n  height: 100%;\n  right: -45%;\n  font-size: 0.9rem;\n\n  > ul {\n    display: inline-block;\n    position: sticky;\n    top: 96px; // gnb높이 만큼\n    line-height: 1.25;\n    max-height: 80vh;\n    overflow-y: auto;\n    word-break: keep-all;\n    border-left: 2px solid var(--color-text);\n    li {\n      margin: 0 0 0.6rem 0.6rem;\n      > ul {\n        margin: 0 0 0.6rem 0.6rem;\n      }\n    }\n    p {\n      margin: 0 0 0.6rem 0;\n      border-radius: 5px;\n    }\n    a {\n      display: inline-block;\n      &:hover {\n        color: var(--color-primary);\n      }\n    }\n  }\n  @media (max-width: 1460px) {\n    right: -38%;\n  }\n\n  @media ${({ theme: { media } }) => media.xLarge} {\n    position: relative;\n    right: 0;\n    max-width: 100%;\n    > ul {\n      padding-left: 2rem;\n    }\n  }\n`\n\n// Footer\n\nexport const Footer = styled.div`\n  width: var(--main-content-width);\n  margin: var(--padding-s) auto;\n  border-top: 1px solid var(--color-background-secondary);\n  padding-top: var(--padding-s);\n`\n\n// gatsby-plugin-image 라이브러리에서 제공해주는 GatsbyImage 컴포넌트에는 기본적으로 적용되어있는 인라인 스타일이 존재하는데,\n// 인라인 스타일은 !important 속성이 없으면 스타일 적용 순위에서 밀리기 때문에 아래와 같이 styled(GatsbyImage) 과 같이 넘기지 않고 함수 내부에서 props를 받아 스타일과 함께 GatsbyImage 컴포넌트에 넘겨주도록 구현\n// 하지만 !important 속성은 가능한 사용하지 말아야 하는 속성이기 때문에 위의 코드와 같이 직접 인라인으로 포지션 스타일을 넘겨주었습니다.\nexport const BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n\n  @media ${({ theme }) => theme.media.medium} {\n    height: 300px;\n  }\n`\n","import Bio from '@/components/Bio'\nimport Comment from '@/components/Comment'\n\nimport * as S from '../PostDetail.style'\n\nconst PostFooter = () => {\n  return (\n    <S.Footer>\n      <Bio />\n      <Comment />\n    </S.Footer>\n  )\n}\n\nexport default PostFooter\n","import * as S from '../PostDetail.style'\n\nexport interface PostContentProps {\n  html: string\n}\n\nconst PostContent = ({ html }: PostContentProps) => {\n  return <S.MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import * as S from '../PostDetail.style'\n\nexport interface TableOfContentProps {\n  tableOfContents: string\n}\n\nconst TableOfContent = ({ tableOfContents }: TableOfContentProps) => {\n  return <S.TableOfContent className=\"table-of-content\" dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n}\n\nexport default TableOfContent\n","import * as S from '../PostDetail.style'\nimport PostContent from './PostContent'\nimport TableOfContent from './TableOfContent'\n\ninterface PostBodyProps {\n  tableOfContents: string\n  html: string\n}\n\n// 문자열 형태의 HTML 코드를 출력하는 것도 dangerouslySetInnerHTML 속성을 통해 간단하게 구현이 가능\nconst PostBody = ({ tableOfContents, html }: PostBodyProps) => {\n  return (\n    <S.Body>\n      <TableOfContent tableOfContents={tableOfContents} />\n      <PostContent html={html} />\n    </S.Body>\n  )\n}\n\nexport default PostBody\n","import * as S from '../PostDetail.style'\n\nexport interface PostHeadInfoProps {\n  title: string\n  date: string\n  categories: string[]\n  readingTime: string\n}\n\nconst PostHeaderInfo = ({ title, date, categories, readingTime }: PostHeadInfoProps) => {\n  return (\n    <S.PostHeadInfoWrapper>\n      <S.Title>{title}</S.Title>\n      <S.PostData>\n        <div>{categories.map(v => v.toUpperCase()).join(' / ')}</div>\n        <S.PostInfo>\n          <span>{date}</span>·<span>{readingTime}</span>\n        </S.PostInfo>\n      </S.PostData>\n    </S.PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeaderInfo\n","import { GatsbyImageDataType } from '@/types/gatsby.type'\n\nimport * as S from '../PostDetail.style'\nimport PostHeaderInfo, { PostHeadInfoProps } from './PostHeader.info'\n\ninterface PostHeaderProps extends PostHeadInfoProps {\n  thumbnail: GatsbyImageDataType\n}\n\nconst PostHeader = ({ title, date, categories, thumbnail, readingTime }: PostHeaderProps) => {\n  return (\n    <S.Header>\n      <S.BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeaderInfo title={title} date={date} categories={categories} readingTime={readingTime} />\n    </S.Header>\n  )\n}\n\nexport default PostHeader\n","import PostFooter from '@/components/PostDetail/PostFooter'\nimport SEO from '@/components/SEO'\nimport Layout from '@/Layout'\nimport { PostPageItemType } from '@/types/PostItem.types'\n\nimport PostBody from './PostBody'\nimport PostHeader from './PostHeader'\n\ninterface PostPageInfoProps {\n  postPageInfo: PostPageItemType\n  href: string\n  author: string\n  favicon: string\n  seo: {\n    google: string\n    naver: string\n  }\n}\n\nconst PostDetail = ({ postPageInfo, href, author, favicon, seo }: PostPageInfoProps) => {\n  const {\n    node: {\n      tableOfContents,\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n      fields: { readingTime },\n    },\n  } = postPageInfo\n  return (\n    <Layout>\n      <SEO\n        author={author}\n        siteUrl={href}\n        title={title}\n        description={summary}\n        image={publicURL}\n        keywords={categories}\n        favicon={favicon}\n        seo={seo}\n      />\n      <PostHeader\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n        readingTime={readingTime.text}\n      />\n      <PostBody tableOfContents={tableOfContents} html={html} />\n      <PostFooter />\n    </Layout>\n  )\n}\n\nexport default PostDetail\n","import { graphql } from 'gatsby'\nimport React from 'react'\n\nimport PostDetail from '@/components/PostDetail'\nimport useBlogConfig from '@/hooks/useBlogConfig'\nimport { PostPageItemType } from '@/types/PostItem.types'\n\ninterface PostTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: PostTemplateProps) => {\n  const { author, favicon, seo } = useBlogConfig()\n  return <PostDetail postPageInfo={edges[0]} href={href} author={author} favicon={favicon} seo={seo} />\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          tableOfContents\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n          fields {\n            slug\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["isDarkMode","useThemeModeProviderState","CONFIG","useBlogConfig","utterances","utteranceTheme","utteranceElement","useRef","useEffect","current","attributes","msg","utteranceIframe","document","querySelector","type","theme","contentWindow","postMessage","createElement","issueTerm","Object","entries","forEach","key","value","setAttribute","appendChild","useUtterance","___EmotionJSX","ref","Header","media","medium","PostHeadInfoWrapper","Title","typography","displayBoldLarge","displayBold","PostData","linkMedium","linkBase","small","linkSmall","PostInfo","Body","MarkdownRenderer","markdownStyle","TableOfContent","xLarge","Footer","BackgroundImage","_styled","props","GatsbyImage","style","position","S","Bio","Comment","html","dangerouslySetInnerHTML","__html","tableOfContents","className","PostContent","title","date","categories","readingTime","map","v","toUpperCase","join","thumbnail","image","alt","PostHeaderInfo","postPageInfo","href","author","favicon","seo","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","fields","Layout","SEO","siteUrl","description","keywords","PostHeader","text","PostBody","PostFooter","edges","data","allMarkdownRemark","location","PostDetail"],"sourceRoot":""}