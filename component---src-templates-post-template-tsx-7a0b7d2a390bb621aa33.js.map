{"version":3,"file":"component---src-templates-post-template-tsx-7a0b7d2a390bb621aa33.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/hooks/useUtterance.ts","webpack://gatsby-starter-default/./src/components/Comment/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostFooter/PostFooter.style.ts","webpack://gatsby-starter-default/./src/components/PostDetail/PostFooter/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostBody/PostBody.style.ts","webpack://gatsby-starter-default/./src/components/PostDetail/PostBody/PostContent.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostBody/TableOfContent.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostBody/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostHeader/PostHeader.style.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostHeader/PostHeader.info.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/PostHeader/index.tsx","webpack://gatsby-starter-default/./src/components/PostDetail/index.tsx","webpack://gatsby-starter-default/./src/templates/post.template.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\nimport BLOG_CONFIG from '@/constant/blog.config'\nimport { useThemeModeProviderState } from '@/context/ThemeMode.Provider'\n\nconst useUtterance = () => {\n  const { isDarkMode } = useThemeModeProviderState()\n  const utteranceTheme = isDarkMode ? 'github-dark' : 'github-light'\n  const utteranceElement = useRef<HTMLDivElement>(null)\n\n  const createUtterance = () => {\n    const utterances: HTMLScriptElement = document.createElement('script')\n    const attributes = { ...BLOG_CONFIG.utterances, theme: utteranceTheme }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    utteranceElement.current?.appendChild(utterances)\n  }\n\n  const setThemeUtterance = (iframe: HTMLIFrameElement) => {\n    const msg = {\n      type: 'set-theme',\n      theme: utteranceTheme,\n    }\n    iframe.contentWindow?.postMessage(msg, 'https://utteranc.es')\n  }\n\n  useEffect(() => {\n    if (utteranceElement.current === null) return\n    const utteranceIframe = document.querySelector('iframe.utterances-frame') as HTMLIFrameElement\n    utteranceIframe ? setThemeUtterance(utteranceIframe) : createUtterance()\n  }, [isDarkMode])\n\n  return { utteranceElement }\n}\n\nexport default useUtterance\n","import useUtterance from '@/hooks/useUtterance'\n\nconst Comment = () => {\n  const { utteranceElement } = useUtterance()\n\n  return <div ref={utteranceElement} />\n}\n\nexport default Comment\n","import styled from '@emotion/styled'\n\nexport const Container = styled.div`\n  width: 768px;\n  margin: 32px auto;\n  min-width: 680px;\n  border-top: 1px solid var(--color-background-secondary);\n  border-bottom: 1px solid var(--color-background-secondary);\n  padding-top: 32px;\n`\n","import Bio from '@/components/Bio'\nimport Comment from '@/components/Comment'\n\nimport * as S from './PostFooter.style'\n\nconst PostFooter = () => {\n  return (\n    <S.Container>\n      <Bio />\n      <Comment />\n    </S.Container>\n  )\n}\n\nexport default PostFooter\n","import styled from '@emotion/styled'\n\nexport const Container = styled.div`\n  position: relative;\n`\n\nexport const MarkdownRenderer = styled.article`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  min-width: 680px;\n  word-break: break-all;\n  ${({ theme: { markdownStyle } }) => markdownStyle}\n`\n\nexport const TableOfContent = styled.aside`\n  position: absolute;\n  height: 100%;\n  right: 0px;\n  transform: translateX(-16%);\n  padding: 1rem;\n  font-size: 0.9rem;\n\n  @media (max-width: 1360px) {\n    position: relative;\n    transform: translateX(0);\n    margin: 0 auto;\n    width: 768px;\n    min-width: 680px;\n    > ul {\n      width: 768px;\n      min-width: 680px;\n      padding-left: 2rem;\n    }\n  }\n\n  > ul {\n    display: inline-block;\n    position: sticky;\n    top: 96px; // gnb높이 만큼\n    line-height: 1.25;\n    max-height: calc(80vh);\n    overflow-y: auto;\n    max-width: calc(300px - 4rem);\n    word-break: keep-all;\n    border-left: 2px solid #eeeeee;\n    li {\n      margin: 0 0 0.6rem 0.6rem;\n      > ul {\n        margin: 0 0 0.6rem 0.6rem;\n      }\n    }\n    p {\n      margin: 0 0 0.6rem 0;\n      border-radius: 5px;\n    }\n    a {\n      display: inline-block;\n      width: 100%;\n      /* padding: 0.4rem; */\n      &:hover {\n        color: var(--color-primary);\n      }\n    }\n  }\n`\n","import * as S from './PostBody.style'\n\nexport interface PostContentProps {\n  html: string\n}\n\nconst PostContent = ({ html }: PostContentProps) => {\n  return <S.MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import * as S from './PostBody.style'\n\nexport interface TableOfContentProps {\n  tableOfContents: string\n}\n\nconst TableOfContent = ({ tableOfContents }: TableOfContentProps) => {\n  return <S.TableOfContent className=\"table-of-content\" dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n}\n\nexport default TableOfContent\n","import * as S from './PostBody.style'\nimport PostContent from './PostContent'\nimport TableOfContent from './TableOfContent'\n\ninterface PostBodyProps {\n  tableOfContents: string\n  html: string\n}\n\n// 문자열 형태의 HTML 코드를 출력하는 것도 dangerouslySetInnerHTML 속성을 통해 간단하게 구현이 가능\nconst PostBody = ({ tableOfContents, html }: PostBodyProps) => {\n  return (\n    <S.Container>\n      <TableOfContent tableOfContents={tableOfContents} />\n      <PostContent html={html} />\n    </S.Container>\n  )\n}\n\nexport default PostBody\n","import styled from '@emotion/styled'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nimport { GatsbyImageDataType } from '@/types/gatsby.type'\n\ninterface GatsbyImgProps {\n  image: GatsbyImageDataType\n  alt: string\n  className?: string\n}\n\nexport const PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n  margin-bottom: 64px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nexport const PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 60px 0;\n  color: var(--color-white);\n  background-color: transparent;\n  position: relative;\n  z-index: 100;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\n\nexport const Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  ${({ theme: { typography } }) => typography.displayBoldLarge}\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nexport const PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n\n  ${({ theme: { typography } }) => typography.linkMedium}\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nexport const PrevPageIcon = styled.div`\n  display: grid;\n  place-items: center;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: var(--color-white);\n  color: var(--color-black);\n  font-size: 22px;\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 18px;\n  }\n`\n\n// gatsby-plugin-image 라이브러리에서 제공해주는 GatsbyImage 컴포넌트에는 기본적으로 적용되어있는 인라인 스타일이 존재하는데,\n// 인라인 스타일은 !important 속성이 없으면 스타일 적용 순위에서 밀리기 때문에 아래와 같이 styled(GatsbyImage) 과 같이 넘기지 않고 함수 내부에서 props를 받아 스타일과 함께 GatsbyImage 컴포넌트에 넘겨주도록 구현\n// 하지만 !important 속성은 가능한 사용하지 말아야 하는 속성이기 때문에 위의 코드와 같이 직접 인라인으로 포지션 스타일을 넘겨주었습니다.\nexport const BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n","import * as S from './PostHeader.style'\n\nexport interface PostHeadInfoProps {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeaderInfo = ({ title, date, categories }: PostHeadInfoProps) => {\n  return (\n    <S.PostHeadInfoWrapper>\n      <S.Title>{title}</S.Title>\n      <S.PostData>\n        <div>{categories.map(v => v.toUpperCase()).join(' / ')}</div>\n        <div>{date}</div>\n      </S.PostData>\n    </S.PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeaderInfo\n","import { GatsbyImageDataType } from '@/types/gatsby.type'\n\nimport PostHeaderInfo, { PostHeadInfoProps } from './PostHeader.info'\nimport * as S from './PostHeader.style'\n\ninterface PostHeaderProps extends PostHeadInfoProps {\n  thumbnail: GatsbyImageDataType\n}\n\nconst PostHeader = ({ title, date, categories, thumbnail }: PostHeaderProps) => {\n  return (\n    <S.PostHeadWrapper>\n      <S.BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeaderInfo title={title} date={date} categories={categories} />\n    </S.PostHeadWrapper>\n  )\n}\n\nexport default PostHeader\n","import PostFooter from '@/components/PostDetail/PostFooter'\nimport SEO from '@/components/SEO'\nimport Layout from '@/Layout'\nimport { PostPageItemType } from '@/types/PostItem.types'\n\nimport PostBody from './PostBody'\nimport PostHeader from './PostHeader'\n\ninterface PostPageInfoProps {\n  postPageInfo: PostPageItemType\n  href: string\n  author: string\n  favicon: string\n  seo: {\n    google: string\n    naver: string\n  }\n}\n\nconst PostDetail = ({ postPageInfo, href, author, favicon, seo }: PostPageInfoProps) => {\n  const {\n    node: {\n      tableOfContents,\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = postPageInfo\n  return (\n    <Layout>\n      <SEO\n        author={author}\n        siteUrl={href}\n        title={title}\n        description={summary}\n        image={publicURL}\n        keywords={categories}\n        favicon={favicon}\n        seo={seo}\n      />\n      <PostHeader title={title} date={date} categories={categories} thumbnail={gatsbyImageData} />\n      <PostBody tableOfContents={tableOfContents} html={html} />\n      <PostFooter />\n    </Layout>\n  )\n}\n\nexport default PostDetail\n","import { graphql } from 'gatsby'\nimport React from 'react'\n\nimport PostDetail from '@/components/PostDetail'\nimport { useSiteMetadata } from '@/hooks/useSiteMetaData'\nimport { PostPageItemType } from '@/types/PostItem.types'\n\ninterface PostTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: PostTemplateProps) => {\n  const { author, favicon, seo } = useSiteMetadata()\n  return <PostDetail postPageInfo={edges[0]} href={href} author={author} favicon={favicon} seo={seo} />\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          tableOfContents\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["isDarkMode","useThemeModeProviderState","utteranceTheme","utteranceElement","useRef","useEffect","current","utterances","attributes","msg","utteranceIframe","document","querySelector","type","theme","contentWindow","postMessage","createElement","BLOG_CONFIG","Object","entries","forEach","key","value","setAttribute","appendChild","useUtterance","___EmotionJSX","ref","Container","S","Bio","Comment","MarkdownRenderer","markdownStyle","TableOfContent","html","dangerouslySetInnerHTML","__html","tableOfContents","className","PostContent","PostHeadWrapper","PostHeadInfoWrapper","Title","typography","displayBoldLarge","PostData","linkMedium","BackgroundImage","_styled","props","GatsbyImage","style","position","process","title","date","categories","map","v","toUpperCase","join","thumbnail","image","alt","PostHeaderInfo","postPageInfo","href","author","favicon","seo","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","Layout","SEO","siteUrl","description","keywords","PostHeader","PostBody","PostFooter","edges","data","allMarkdownRemark","location","useSiteMetadata","PostDetail"],"sourceRoot":""}